1.Task 1: Sorting a List of Students
import java.util.*;

// Student class implementing Comparable for natural sorting by name
class Student implements Comparable<Student> {
    String name;
    int age;
    int rollNumber;

    public Student(String name, int age, int rollNumber) {
        this.name = name;
        this.age = age;
        this.rollNumber = rollNumber;
    }

    // Natural order sorting by name
    @Override
    public int compareTo(Student other) {
        return this.name.compareTo(other.name);
    }

    @Override
    public String toString() {
        return "Student{name='" + name + "', age=" + age + ", rollNumber=" + rollNumber + "}";
    }
}

// Comparator to sort by Age
class AgeComparator implements Comparator<Student> {
    @Override
    public int compare(Student s1, Student s2) {
        return Integer.compare(s1.age, s2.age);
    }
}

// Comparator to sort by Roll Number
class RollNumberComparator implements Comparator<Student> {
    @Override
    public int compare(Student s1, Student s2) {
        return Integer.compare(s1.rollNumber, s2.rollNumber);
    }
}

public class StudentSortingDemo {
    public static void main(String[] args) {
        List<Student> students = new ArrayList<>();
        students.add(new Student("Alice", 22, 103));
        students.add(new Student("Bob", 20, 101));
        students.add(new Student("Charlie", 21, 102));
        students.add(new Student("David", 23, 104));

        // Sorting by natural order (Name)
        Collections.sort(students);
        System.out.println("Sorted by Name:");
        students.forEach(System.out::println);

        // Sorting by Age
        Collections.sort(students, new AgeComparator());
        System.out.println("\nSorted by Age:");
        students.forEach(System.out::println);

        // Sorting by Roll Number
        Collections.sort(students, new RollNumberComparator());
        System.out.println("\nSorted by Roll Number:");
        students.forEach(System.out::println);
    }
}
2.Create a Java program where two threads run simultaneously, one printing even numbers and the other printing odd numbers.

class EvenOddPrinter {
    private int limit;
    private int number = 1;
    private final Object lock = new Object();

    public EvenOddPrinter(int limit) {
        this.limit = limit;
    }

    public void printEven() {
        while (number <= limit) {
            synchronized (lock) {
                while (number % 2 != 0) {
                    try {
                        lock.wait(); // Wait for odd thread to print
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                if (number <= limit) {
                    System.out.println("Even: " + number);
                    number++;
                    lock.notify(); // Notify odd thread
                }
            }
        }
    }

    public void printOdd() {
        while (number <= limit) {
            synchronized (lock) {
                while (number % 2 == 0) {
                    try {
                        lock.wait(); // Wait for even thread to print
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                if (number <= limit) {
                    System.out.println("Odd: " + number);
                    number++;
                    lock.notify(); // Notify even thread
                }
            }
        }
    }
}

public class EvenOddThreadDemo {
    public static void main(String[] args) {
        int limit = 10; // Print numbers up to 10
        EvenOddPrinter printer = new EvenOddPrinter(limit);

        Thread evenThread = new Thread(printer::printEven);
        Thread oddThread = new Thread(printer::printOdd);

        oddThread.start();
        evenThread.start();
    }
}




