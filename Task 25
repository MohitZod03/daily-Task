1.Implement a banking system where multiple threads withdraw money from a shared account, ensuring that withdrawal does not exceed balance.

class BankAccount {
    private int balance;

    public BankAccount(int initialBalance) {
        this.balance = initialBalance;
    }

    // Synchronized method to ensure thread safety during withdrawal
    public synchronized void withdraw(String customer, int amount) {
        if (amount > balance) {
            System.out.println(customer + " tried to withdraw ₹" + amount + " but insufficient balance! Available balance: ₹" + balance);
            return;
        }

        System.out.println(customer + " is withdrawing ₹" + amount);
        balance -= amount;
        System.out.println("Remaining balance: ₹" + balance);
    }

    public int getBalance() {
        return balance;
    }
}

class CustomerThread extends Thread {
    private BankAccount account;
    private String customerName;
    private int withdrawAmount;

    public CustomerThread(BankAccount account, String customerName, int withdrawAmount) {
        this.account = account;
        this.customerName = customerName;
        this.withdrawAmount = withdrawAmount;
    }

    @Override
    public void run() {
        account.withdraw(customerName, withdrawAmount);
    }
}

public class BankSystem {
    public static void main(String[] args) {
        BankAccount account = new BankAccount(5000); // Initial balance ₹5000

        // Multiple customers trying to withdraw
        Thread t1 = new CustomerThread(account, "Alice", 3000);
        Thread t2 = new CustomerThread(account, "Bob", 2000);
        Thread t3 = new CustomerThread(account, "Charlie", 1000);
        Thread t4 = new CustomerThread(account, "David", 2000);

        t1.start();
        t2.start();
        t3.start();
        t4.start();
    }
}
