Create a generic class Pair<T, U> that can hold two different types of values. Implement methods to set and get these values.
class Pair<T, U> {
    private T first;
    private U second;

    public Pair(T first, U second) {
        this.first = first;
        this.second = second;
    }

    public T getFirst() {
        return first;
    }

    public void setFirst(T first) {
        this.first = first;
    }

    public U getSecond() {
        return second;
    }

    public void setSecond(U second) {
        this.second = second;
    }

    @Override
    public String toString() {
        return "Pair{" + "first=" + first + ", second=" + second + "}";
    }
}

// Example usage:
public class GenericPairExample {
    public static void main(String[] args) {
        Pair<String, Integer> student = new Pair<>("Alice", 22);
        System.out.println(student); // Output: Pair{first=Alice, second=22}
    }
}

Write a generic method swap() that takes two elements of the same type and swaps their values.

class SwapUtil {
    public static <T> void swap(T[] array, int i, int j) {
        T temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
}

// Example usage:
public class GenericSwapExample {
    public static void main(String[] args) {
        Integer[] numbers = {1, 2, 3, 4};
        SwapUtil.swap(numbers, 0, 2);
        System.out.println(Arrays.toString(numbers)); // Output: [3, 2, 1, 4]

        String[] words = {"Hello", "World"};
        SwapUtil.swap(words, 0, 1);
        System.out.println(Arrays.toString(words)); // Output: [World, Hello]
    }
}

Create a generic method that finds the maximum of three numbers, where the numbers can be
class MaxUtil {
    public static <T extends Comparable<T>> T findMax(T a, T b, T c) {
        T max = a;
        if (b.compareTo(max) > 0) max = b;
        if (c.compareTo(max) > 0) max = c;
        return max;
    }
}

// Example usage:
public class GenericMaxExample {
    public static void main(String[] args) {
        System.out.println("Max Integer: " + MaxUtil.findMax(10, 20, 15)); // 20
        System.out.println("Max Double: " + MaxUtil.findMax(10.5, 20.3, 15.2)); // 20.3
        System.out.println("Max String: " + MaxUtil.findMax("Apple", "Banana", "Peach")); // Peach
    }
}


